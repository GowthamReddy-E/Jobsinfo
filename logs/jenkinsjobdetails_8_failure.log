Started by user admin
Obtained Jenkinsfile from git https://github.com/GowthamReddy-E/Jobsinfo.git
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in C:\ProgramData\Jenkins\.jenkins\workspace\jenkinsjobdetails@2
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/GowthamReddy-E/Jobsinfo.git
 > C:\Program Files\Git\bin\git.exe init C:\ProgramData\Jenkins\.jenkins\workspace\jenkinsjobdetails@2 # timeout=10
Fetching upstream changes from https://github.com/GowthamReddy-E/Jobsinfo.git
 > C:\Program Files\Git\bin\git.exe --version # timeout=10
 > git --version # 'git version 2.37.3.windows.1'
 > C:\Program Files\Git\bin\git.exe fetch --tags --force --progress -- https://github.com/GowthamReddy-E/Jobsinfo.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > C:\Program Files\Git\bin\git.exe config remote.origin.url https://github.com/GowthamReddy-E/Jobsinfo.git # timeout=10
 > C:\Program Files\Git\bin\git.exe config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
 > C:\Program Files\Git\bin\git.exe rev-parse "refs/remotes/origin/gowtham^{commit}" # timeout=10
Checking out Revision 6cf640443c2b76591a9d549e3706f32aaf10dae2 (refs/remotes/origin/gowtham)
 > C:\Program Files\Git\bin\git.exe config core.sparsecheckout # timeout=10
 > C:\Program Files\Git\bin\git.exe checkout -f 6cf640443c2b76591a9d549e3706f32aaf10dae2 # timeout=10
Commit message: "latest"
 > C:\Program Files\Git\bin\git.exe rev-list --no-walk 6cf640443c2b76591a9d549e3706f32aaf10dae2 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Build Docker Image)
[Pipeline] script
[Pipeline] {
[Pipeline] isUnix
[Pipeline] withEnv
[Pipeline] {
[Pipeline] bat

C:\ProgramData\Jenkins\.jenkins\workspace\jenkinsjobdetails@2>docker build -t "my_nginx_image" -f Dockerfile . 
#0 building with "default" instance using docker driver

#1 [internal] load build definition from Dockerfile
#1 transferring dockerfile: 739B 0.0s done
#1 DONE 0.1s

#2 [internal] load metadata for docker.io/library/nginx:latest
#2 DONE 1.4s

#3 [internal] load .dockerignore
#3 transferring context: 2B done
#3 DONE 0.1s

#4 [1/9] FROM docker.io/library/nginx:latest@sha256:c26ae7472d624ba1fafd296e73cecc4f93f853088e6a9c13c0d52f6ca5865107
#4 DONE 0.0s

#5 [internal] load build context
#5 transferring context: 115.50kB 0.4s done
#5 DONE 0.5s

#6 [2/9] RUN apt-get update &&     apt-get install -y python3 python3-pip python3-full cron &&     rm -rf /var/lib/apt/lists/*
#6 CACHED

#7 [3/9] COPY index.html /usr/share/nginx/html/
#7 CACHED

#8 [4/9] COPY . .
#8 DONE 0.1s

#9 [5/9] RUN pip3 install  requirements.txt
#9 1.551 error: externally-managed-environment
#9 1.551 
#9 1.551 × This environment is externally managed
#9 1.551 ╰─> To install Python packages system-wide, try apt install
#9 1.551     python3-xyz, where xyz is the package you are trying to
#9 1.551     install.
#9 1.551     
#9 1.551     If you wish to install a non-Debian-packaged Python package,
#9 1.551     create a virtual environment using python3 -m venv path/to/venv.
#9 1.551     Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make
#9 1.551     sure you have python3-full installed.
#9 1.551     
#9 1.551     If you wish to install a non-Debian packaged Python application,
#9 1.551     it may be easiest to use pipx install xyz, which will manage a
#9 1.551     virtual environment for you. Make sure you have pipx installed.
#9 1.551     
#9 1.551     See /usr/share/doc/python3.11/README.venv for more information.
#9 1.551 
#9 1.551 note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.
#9 1.551 hint: See PEP 668 for the detailed specification.
#9 ERROR: process "/bin/sh -c pip3 install  requirements.txt" did not complete successfully: exit code: 1
------
 > [5/9] RUN pip3 install  requirements.txt:
1.551     sure you have python3-full installed.
1.551     
1.551     If you wish to install a non-Debian packaged Python application,
1.551     it may be easiest to use pipx install xyz, which will manage a
1.551     virtual environment for you. Make sure you have pipx installed.
1.551     
1.551     See /usr/share/doc/python3.11/README.venv for more information.
1.551 
1.551 note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.
1.551 hint: See PEP 668 for the detailed specification.
------
Dockerfile:13
--------------------
  11 |     COPY . .
  12 |     
  13 | >>> RUN pip3 install  requirements.txt
  14 |     
  15 |     # Copy the cron job file into the container
--------------------
ERROR: failed to solve: process "/bin/sh -c pip3 install  requirements.txt" did not complete successfully: exit code: 1
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Run Docker Container)
Stage "Run Docker Container" skipped due to earlier failure(s)
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
ERROR: script returned exit code 1
C:\ProgramData\Jenkins\.jenkins\workspace\jenkinsjobdetails@tmp\jfrog\8\.jfrog deleted
Finished: FAILURE
